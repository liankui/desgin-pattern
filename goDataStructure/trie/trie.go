package trie

/* https://golangbyexample.com/trie-implementation-in-go/
Trie（也称为前缀树或字典树）是一种用于存储和检索字符串集合的树形数据结构。Trie 的名称来自于 retrieval（检索），因为它在字符串集合中高效地执行查找操作。

在 Trie 中，每个节点代表一个字符，从根节点到叶子节点的路径表示一个字符串。根节点表示空字符串（即空前缀）。Trie 的一个主要特点是共享相同前缀的字符串共用相同的前缀路径，这使得 Trie 在存储和搜索字符串时非常高效。

每个节点包含以下几个重要的属性：

指向子节点的指针/链接：这些链接通常是一个固定大小的数组，用于保存相应字符的子节点。
是否为单词的结尾：标记一个节点是否代表一个完整的字符串。
下面是一个简单的示例来说明 Trie 数据结构的基本原理。考虑以下字符串集合：["apple", "app", "banana", "orange", "applesauce"]。

构建 Trie 如下：
         root
        /   |   \
       a    b     o
      / \    \     \
     p   p    a     r
    /    \         /
   p*    l*       a*
  /      |       /
  l*     e*     n*
 /        |      \
 e*       s*      g
/                |
s*               e*
 |               |
 a*              |
                  |
                  s*
在上述 Trie 中，节点后面带有 * 的表示该节点为一个单词的结尾。注意到 "apple" 和 "applesauce" 共用相同的前缀路径，这充分利用了 Trie 的优势。

Trie 的主要优点包括：

快速插入和搜索：Trie 具有较快的插入和搜索操作，尤其在字符串集合中具有共享前缀的情况下。
节省空间：共享前缀的字符串在 Trie 中仅需要存储一次，这可以节省内存空间。
前缀搜索：Trie 能够高效地进行前缀搜索，这对于查找具有特定前缀的所有字符串非常有用。
然而，Trie 也有一些缺点：

空间消耗：Trie 的空间消耗可能随着字符串集合的增长而增加，因为它需要存储大量的指针和链接。
构建时间：在构建 Trie 时，如果字符串集合很大，构建过程可能会比较耗时。
*/
