package objectPool

/*
https://golangbyexample.com/golang-object-pool/
对象池设计模式是一种创造性的设计模式，其中预先初始化和创建对象池，并将其保存在池中。
根据需要，客户端可以从池中请求对象，使用它并将其返回到池中。池中的物体从未被摧毁。

何时使用:
* 当创建类对象的成本很高，并且在特定时间需要的此类对象的数量不多时。
	-让我们以DB连接为例。每个连接对象的创建成本都很高，因为涉及网络调用，并且一次可能不需要超过某个连接。对象池设计模式非常适合这种情况。
* 当池对象是不可变对象时
	-再次以DB连接为例。DB连接是一个不可变的对象。几乎没有任何财产需要更改
* 出于性能原因。由于已经创建了池，因此它将显着提高应用程序的性能
*/

type iPoolObject interface {
	getID() string // 这是可用于比较两个不同池对象的任何id
}
